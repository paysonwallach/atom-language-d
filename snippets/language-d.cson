".source.d":
  "class … { … }":
    prefix: "cla"
    body: '''
      class $1
      {
        this($2)
        {
          $0
        }
      }
      
    '''
  "debug { … }":
    prefix: "debug"
    body: '''
      debug
      {
        $0
      }
    '''
  "debug (module) { … }":
    prefix: "debugm"
    body: '''
      debug ($1)
      {
        $0
      }
    '''
  "enum … { … }":
    prefix: "en"
    body: '''
      enum ${1:name}
      {
          $0
      }
    '''
  "foreach_reverse (e ; …) { … }":
    prefix: "fer"
    body: '''
      foreach_reverse (${1:e} ; $0)
      {
        
      }
    '''
  "foreach (e ; …) { … }":
    prefix: "fe"
    body: '''
      foreach (${1:e} ; $0)
      {
        
      }
    '''
  "if … else":
    prefix: "ife"
    body: '''
      if (${1:condition})
      {
        $2
      }
      else
      {
        $0
      }
    '''
  "if …":
    prefix: "if"
    body: '''
      if (${1:condition})
      {
        $0
      }
    '''
  "import …":
    prefix: "im"
    body: "import ${1:${TM_FILEPATH/.+\\/([^\\/]+)\\/[^\\/]+\\.d$/\\l$1/}.};"
  "int main(string[] args) { … }":
    prefix: "maina"
    body: '''
      int main(string[] args)
      {
        $1
        return 0;
      }
    '''
  "void main() { … }":
    prefix: "main"
    body: '''
      void main()
      {
        ${1}
      }
    '''
  "method … { … }":
    prefix: "me"
    body: '''
      /**
       * $2
       */
      ${1:void} ${2:method}(${3:args})
      {
        ${0}
      }
    '''
  "return …":
    prefix: "r"
    body: "return $0;"
  "struct … { … }":
    prefix: "st"
    body: '''
      /**
       * $2
       */
      struct ${1:name}
      {
        $3
      }
    '''
  "try … catch … finally":
    prefix: "tcf"
    body: '''
      try
      {
        $2
      }
      catch (${1:Exception} e)
      {
        $3
      }
      finally
      {
        $0
      }
    '''
  "try … catch":
    prefix: "tc"
    body: '''
      try
      {
        $2
      }
      catch (${1:Exception} e)
      {
        $0
      }
    '''
  "try … finally":
    prefix: "tf"
    body: '''
      try
      {
        $1
      }
      finally
      {
        $0
      }
    '''
  "unittest { … }":
    prefix: "unit"
    body: '''
      unittest
      {
        $0
      }
    '''
  "version (ident) { … }":
    prefix: "ver"
    body: '''
      version(${1:Posix})
      {
        $0
      }
    '''
  "while (…) { … }":
    prefix: "while"
    body: '''
      while (${1:condition})
      {
        $0
      }
    '''
